// Generated by gencpp from file nist_gear/ConveyorBeltControlRequest.msg
// DO NOT EDIT!


#ifndef NIST_GEAR_MESSAGE_CONVEYORBELTCONTROLREQUEST_H
#define NIST_GEAR_MESSAGE_CONVEYORBELTCONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nist_gear
{
template <class ContainerAllocator>
struct ConveyorBeltControlRequest_
{
  typedef ConveyorBeltControlRequest_<ContainerAllocator> Type;

  ConveyorBeltControlRequest_()
    : power(0.0)  {
    }
  ConveyorBeltControlRequest_(const ContainerAllocator& _alloc)
    : power(0.0)  {
  (void)_alloc;
    }



   typedef double _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ConveyorBeltControlRequest_

typedef ::nist_gear::ConveyorBeltControlRequest_<std::allocator<void> > ConveyorBeltControlRequest;

typedef boost::shared_ptr< ::nist_gear::ConveyorBeltControlRequest > ConveyorBeltControlRequestPtr;
typedef boost::shared_ptr< ::nist_gear::ConveyorBeltControlRequest const> ConveyorBeltControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nist_gear

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'nist_gear': ['/home/gents/ariac2020/ws/src/ARIAC/nist_gear/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b61bda1d4e0075084b2082bebb59ea34";
  }

  static const char* value(const ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb61bda1d4e007508ULL;
  static const uint64_t static_value2 = 0x4b2082bebb59ea34ULL;
};

template<class ContainerAllocator>
struct DataType< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nist_gear/ConveyorBeltControlRequest";
  }

  static const char* value(const ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"float64 power\n"
"\n"
;
  }

  static const char* value(const ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConveyorBeltControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nist_gear::ConveyorBeltControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "power: ";
    Printer<double>::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIST_GEAR_MESSAGE_CONVEYORBELTCONTROLREQUEST_H
